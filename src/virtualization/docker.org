#+title:  Docker
#+SETUPFILE: ../org-templates/level-1.org

#+Title:Docker
#+Author: kraghupathi
#+Date: 23 NOV, 2016
* Introduction to docker
Docker is an open platform for developing, shipping, and running
applications. Docker enables you to separate your applications from
your infrastructure so you can deliver software quickly. With Docker,
you can manage your infrastructure in the same ways you manage your
applications. By taking advantage of Docker's methodologies for
shipping, testing, and deploying code quickly, you can significantly
reduce the delay between writing code and running it in production.
* What is the Docker platform?
Docker provides the ability to package and run an application in a
loosely isolated environment called a container. The isolation and
security allow you to run many containers simultaneously on a given
host. Because of the lightweight nature of containers, which run
without the extra load of a hypervisor, you can run more containers on
a given hardware combination than if you were using virtual machines.

Docker provides tooling and a platform to manage the lifecycle of your
containers:
- Encapsulate your applications (and supporting components) into Docker containers
- Distribute and ship those containers to your teams for further development and testing
- Deploy those applications to your production environment, whether it is in a local data center or the Cloud
* What is Docker Engine?
Docker Engine is a client-server application with these major components:
- A server which is a type of long-running program called a daemon process.
- A REST API which specifies interfaces that programs can use to talk to the daemon and instruct it what to do.
- A command line interface (CLI) client.

[[./images/docker-engine.png]]

The CLI uses the Docker REST API to control or interact with the
Docker daemon through scripting or direct CLI commands. Many other
Docker applications use the underlying API and CLI.

The daemon creates and manages Docker objects, such as images,
containers, networks, and data volumes.
* What can I use Docker for?
- Fast, consistent delivery of your applications
  + Docker can streamline the development lifecycle by allowing
    developers to work in standardized environments using local
    containers which provide your applications and services. You can
    also integrate Docker into your continuous integration and
    continuous deployment (CI/CD) workflow.

 + Consider the following example scenario. Your developers write code
   locally and share their work with their colleagues using Docker
   containers. They can use Docker to push their applications into a
   test environment and execute automated and manual tests. When
   developers find problems, they can fix them in the development
   environment and redeploy them to the test environment for
   testing. When testing is complete, getting the fix to the customer
   is as simple as pushing the updated image to the production
   environment.
- Responsive deployment and scaling
 + Docker¡¯s container-based platform allows for highly portable
   workloads. Docker containers can run on a developer¡¯s local host,
   on physical or virtual machines in a data center, in the Cloud, or
   in a mixture of environments.

 + Docker's portability and lightweight nature also make it easy to
   dynamically manage workloads, scaling up or tearing down
   applications and services as business needs dictate, in near real
   time.
- Running more workloads on the same hardware
 + Docker is lightweight and fast. It provides a viable,
   cost-effective alternative to hypervisor-based virtual machines,
   allowing you to use more of your compute capacity to achieve your
   business goals. This is useful in high density environments and for
   small and medium deployments where you need to do more with fewer
   resources.
* What is Docker's architecture?
Docker uses a client-server architecture. The Docker client talks to
the Docker daemon, which does the heavy lifting of building, running,
and distributing your Docker containers. The Docker client and daemon
can run on the same system, or you can connect a Docker client to a
remote Docker daemon. The Docker client and daemon communicate using a
REST API, over UNIX sockets or a network interface.

[[./images/docker-architecture.jpg]]

** The Docker daemon
The Docker daemon runs on a host machine. The user uses the Docker client to interact with the daemon.
** The Docker client
The Docker client, in the form of the docker binary, is the primary
user interface to Docker. It accepts commands and configuration flags
from the user and communicates with a Docker daemon. One client can
even communicate with multiple unrelated daemons.
** Inside Docker
To understand Docker¡¯s internals, you need to know about images, registries, and containers.
** Docker images
A Docker image is a read-only template with instructions for creating
a Docker container. For example, an image might contain an Ubuntu
operating system with Apache web server and your web application
installed. You can build or update images from scratch or download and
use images created by others. An image may be based on, or may extend,
one or more other images. A docker image is described in text file
called a Dockerfile, which has a simple, well-defined syntax. For more
details about images, see How does a Docker image work?.

Docker images are the *build* component of Docker.
** Docker containers
A Docker container is a runnable instance of a Docker image. You can
run, start, stop, move, or delete a container using Docker API or CLI
commands. When you run a container, you can provide configuration
metadata such as networking information or environment variables. Each
container is an isolated and secure application platform, but can be
given access to resources running in a different host or container, as
well as persistent storage or databases. For more details about
containers, see How does a container work?.

Docker containers are the *run* component of Docker.
** Docker registries
A docker registry is a library of images. A registry can be public or
private, and can be on the same server as the Docker daemon or Docker
client, or on a totally separate server. For more details about
registries, see How does a Docker registry work?

Docker registries are the *distribution* component of Docker.
** Docker services
A Docker service allows a swarm of Docker nodes to work together,
running a defined number of instances of a replica task, which is
itself a Docker image. You can specify the number of concurrent
replica tasks to run, and the swarm manager ensures that the load is
spread evenly across the worker nodes. To the consumer, the Docker
service appears to be a single application. Docker Engine supports
swarm mode in Docker 1.12 and higher.

Docker services are the *scalability* component of Docker.
** How does a Docker image work?
Docker images are read-only templates from which Docker containers are
instantiated. Each image consists of a series of layers. Docker uses
[[https://en.wikipedia.org/wiki/UnionFS][union file systems]] to combine these layers into a single image. Union
file systems allow files and directories of separate file systems,
known as branches, to be transparently overlaid, forming a single
coherent file system.

These layers are one of the reasons Docker is so lightweight. When you
change a Docker image, such as when you update an application to a new
version, a new layer is built and replaces only the layer it
updates. The other layers remain intact. To distribute the update, you
only need to transfer the updated layer. Layering speeds up
distribution of Docker images. Docker determines which layers need to
be updated at runtime.

An image is defined in a Dockerfile. Every image starts from a base
image, such as ubuntu, a base Ubuntu image, or fedora, a base Fedora
image. You can also use images of your own as the basis for a new
image, for example if you have a base Apache image you could use this
as the base of all your web application images. The base image is
defined using the FROM keyword in the dockerfile.

*Note*: [[https://hub.docker.com/][Docker Hub]] is a public registry and stores images.

The docker image is built from the base image using a simple,
descriptive set of steps we call =instructions=, which are stored in a
Dockerfile. Each instruction creates a new layer in the image. Some
examples of *Dockerfile* instructions are:
- Specify the base image (FROM)
- Specify the maintainer (MAINTAINER)
- Run a command (RUN)
- Add a file or directory (ADD)
- Create an environment variable (ENV)
- What process to run when launching a container from this image (CMD)

Docker reads this =Dockerfile= when you request a build of an image, executes the instructions, and returns the image.
** How does a Docker registry work?
A Docker registry stores Docker images. After you build a Docker
image, you can push it to a public registry such as [[https://hub.docker.com/][Docker Hub]] or to a
private registry running behind your firewall. You can also search for
existing images and pull them from the registry to a host.

[[https://hub.docker.com/][Docker Hub]] is a public Docker registry which serves a huge collection
of existing images and allows you to contribute your own. For more
information, go to [[https://docs.docker.com/registry/][Docker Registry]] and [[https://docs.docker.com/datacenter/dtr/2.0/][Docker Trusted Registry]].

[[https://store.docker.com/][Docker store]] allows you to buy and sell Docker images. For image, you
can buy a Docker image containing an application or service from the
software vendor, and use the image to deploy the application into your
testing, staging, and production environments, and upgrade the
application by pulling the new version of the image and redeploying
the containers. Docker Store is currently in private beta.
** How does a container work?
A container uses the host machine¡¯s Linux kernel, and consists of any
extra files you add when the image is created, along with metadata
associated with the container at creation or when the container is
started. Each container is built from an image. The image defines the
container¡¯s contents, which process to run when the container is
launched, and a variety of other configuration details. The Docker
image is read-only. When Docker runs a container from an image, it
adds a read-write layer on top of the image (using a UnionFS as we saw
earlier) in which your application runs.
** What happens when you run a container?
When you use the docker run CLI command or the equivalent API, the
Docker Engine client instructs the Docker daemon to run a
container. This example tells the Docker daemon to run a container
using the ubuntu Docker image, to remain in the foreground in
interactive mode (-i), and to run the /bin/bash command.
#+BEGIN_EXAMPLE
$ docker run -i -t ubuntu /bin/bash
#+END_EXAMPLE
When you run this command, Docker Engine does the following:

- *Pulls the* ubuntu *image*: Docker Engine checks for the presence of the
  ubuntu image. If the image already exists locally, Docker Engine
  uses it for the new container. Otherwise, then Docker Engine pulls
  it from [[https://hub.docker.com/][Docker Hub]].
- *Creates a new container:* Docker uses the image to create a container.
- *Allocates a filesystem and mounts a read-write layer:* The container is created in the file system and a read-write layer is added to the image.
- *Allocates a network / bridge interface:* Creates a network interface that allows the Docker container to talk to the local host.
- *Sets up an IP address:* Finds and attaches an available IP address from a pool.
- *Executes a process that you specify:* Executes the /bin/bash executable.
- *Captures and provides application output:* Connects and logs standard input, outputs and errors for you to see how your application is running, because you requested interactive mode.

Your container is now running. You can manage and interact with it,
use the services and applications it provides, and eventually stop and
remove it.
** The underlying technology
Docker is written in [[https://golang.org/][Go]] and takes advantage of several features of the Linux kernel to deliver its functionality.
** Namespaces
Docker uses a technology called namespaces to provide the isolated
workspace called the container. When you run a container, Docker
creates a set of namespaces for that container.

These namespaces provide a layer of isolation. Each aspect of a
container runs in a separate namespace and its access is limited to
that namespace.

Docker Engine uses namespaces such as the following on Linux:
- *The* pid *namespace:* Process isolation (PID: Process ID).
- *The* net *namespace:* Managing network interfaces (NET: Networking).
- *The* ipc *namespace:* Managing access to IPC resources (IPC: InterProcess Communication).
- *The* mnt *namespace:* Managing filesystem mount points (MNT: Mount).
- *The* uts *namespace:* Isolating kernel and version identifiers. (UTS: Unix Timesharing System).
** Control groups
Docker Engine on Linux also relies on another technology called
control groups (cgroups). A cgroup limits an application to a specific
set of resources. Control groups allow Docker Engine to share
available hardware resources to containers and optionally enforce
limits and constraints. For example, you can limit the memory
available to a specific container.
** Union file systems
Union file systems, or UnionFS, are file systems that operate by
creating layers, making them very lightweight and fast. Docker Engine
uses UnionFS to provide the building blocks for containers. Docker
Engine can use multiple UnionFS variants, including AUFS, btrfs, vfs,
and DeviceMapper.
** Container format
Docker Engine combines the namespaces, control groups, and UnionFS
into a wrapper called a container format. The default container format
is =libcontainer=. In the future, Docker may support other container
formats by integrating with technologies such as BSD Jails or Solaris
Zones.
*  How to Install Docker on Ubuntu 16.04 & 14.04 LTS and CentOS/RHEL 7/6
Docker is container-based application framework, which wrap of a
specific application with all its dependencies in a container. Docker
containers can easily to ship to remote location on start there
without making entire application setup. This tutorial will help you
to install and manage Docker on Ubuntu 16.04 LTS, 15.10 & 14.04 LTS
and CentOS/RHEL 7/6 operating systems.
** Verify Requirements 
For standard installation Docker required 64 bit operating system having Kernel >= 3.10 version. Older versions of Kernel have some missing requirements to run all features of Docker.
#+BEGIN_EXAMPLE
$ uname -r
4.4.0-21-generic
#+END_EXAMPLE
For Ubuntu 15.10 & 14.04 Docker recommended to install the *linux-image-extra* kernel package.
#+BEGIN_EXAMPLE
$ sudo apt-get install linux-image-extra-$(uname -r)
#+END_EXAMPLE
** Add Docker Apt Repository on Ubuntu
First import docker GPG key to verify packages signature before installing them with apt-get.
#+BEGIN_EXAMPLE
$ sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
#+END_EXAMPLE
Now create a new apt configuration file =/etc/apt/sources.list.d/docker.list= and one of below docker
 + *For Ubuntu Xenial 16.04 (LTS)*
#+BEGIN_EXAMPLE
deb https://apt.dockerproject.org/repo ubuntu-xenial main
#+END_EXAMPLE
 + *For Ubuntu Wily 15.10*
#+BEGIN_EXAMPLE
deb https://apt.dockerproject.org/repo ubuntu-wily main
#+END_EXAMPLE
 + *For Ubuntu Trusty 14.04 (LTS)*
#+BEGIN_EXAMPLE
deb https://apt.dockerproject.org/repo ubuntu-trusty main
#+END_EXAMPLE
** Add Docker Yum Repository on Centos/RHEL
Let’s add the Docker yum repository on your system. Create a new yum configuration file =/etc/yum.repos.d/docker.repo=
#+BEGIN_EXAMPLE
# vim /etc/yum.repos.d/docker.repo
#+END_EXAMPLE
 and following contents.
#+BEGIN_EXAMPLE
[Docker]
name=Docker Repository
baseurl=https://yum.dockerproject.org/repo/main/centos/$releasever/
enabled=1
gpgcheck=1
gpgkey=https://yum.dockerproject.org/gpg
#+END_EXAMPLE
** Install Docker on Ubuntu
First make sure there are no old repositories added in your system. Purge them before installing them.
#+BEGIN_EXAMPLE
$ sudo apt-get purge lxc-docker
#+END_EXAMPLE
Now use the following commands to upgrade apt index and install docker engine on your system.
#+BEGIN_EXAMPLE
$ sudo apt-get update
$ sudo apt-get install docker-engine
#+END_EXAMPLE
After successful installation of Docker engine, Let’s start the docker service.
#+BEGIN_EXAMPLE
$ sudo service docker start
#+END_EXAMPLE
** Install Docker on CentOS/RHEL
First update all packages on your system using following command.
#+BEGIN_EXAMPLE
# yum update
#+END_EXAMPLE
Now install docker-engine package to install docker on your system. This is install many of required decencies on your system.
#+BEGIN_EXAMPLE
# yum install docker-engine
#+END_EXAMPLE
After successful installation of Docker engine, Let’s start the docker service.
#+BEGIN_EXAMPLE
# service docker start
#+END_EXAMPLE

*  How to Create, List & Delete Docker Containers on Linux 
**  Launch Docker Container 
To launch a new Docker container using below command. This will start a new container and provide you access of that container with /bin/bash shell.
#+BEGIN_EXAMPLE
# docker run [OPTIONS] <IMAGE NAME> [COMMAND] [ARG...]
#+END_EXAMPLE
For example below command will create new docker container using image named “ubuntu”. To list all available images use *docker images* command.
#+BEGIN_EXAMPLE
# docker run -i -t ubuntu /bin/bash
#+END_EXAMPLE
To exit from docker container type *CTRL + P + Q*. This will leave
container running in background an provide you host system console. If
you used exit command, it will stop the current container. [[https://docs.docker.com/engine/reference/run/][Click here]]
to read for more options about docker run command.
** Creating container  
   A container is a runtime instance of a docker image.
 + Create a new container ::
   #+BEGIN_SRC command
   $ docker create [OPTIONS] IMAGE [COMMAND] [ARG...]
   #+END_SRC
   For example:
   #+BEGIN_SRC command 
   $ docker create -it ubuntu:14.04 echo "Hello World"
   #+END_SRC 
   + =docker create= command can be used to set up a container configuration ahead of time so
     that it is ready to start when you need it.
   + Creates a writeable container layer over the specified image.   
   + A container created does not start on it's own and is to be started.
 + Start a container ::
   #+BEGIN_SRC command
   $ docker start [OPTIONS] CONTAINER [CONTAINER...]
   #+END_SRC
   For Example:
   #+BEGIN_SRC command
   $ docker start e76ccff0a41a
   e76ccff0a41a
   #+END_SRC
 + To stop one or more containers ::
   #+BEGIN_SRC command
   $ docker stop [OPTIONS] CONTAINER [CONTAINER...]
   #+END_SRC
   For Example:
   #+BEGIN_SRC command
   $ docker stop e76ccff0a41a
   e76ccff0a41a
   #+END_SRC
+  To restart one or more container ::
   #+BEGIN_SRC command
   $ docker restart [OPTIONS] CONTAINER [CONTAINER...]
   #+END_SRC
   For Example:
   #+BEGIN_SRC command
   $ docker restart e76ccff0a41a
   e76ccff0a41a
   #+END_SRC
 + Destroy a container ::
   #+BEGIN_SRC command
   $ docker rm [OPTIONS] CONTAINER [CONTAINER...]
   #+END_SRC
   + You can destroy one or more containers at a time
   + You cannot delete a container which is currently running. So first stop the
     container and then delete it.
   #+BEGIN_SRC command
   $ docker stop e76ccff0a41a
   e76ccff0a41a
   $ docker rm e76ccff0a41a
   e76ccff0a41a
   #+END_SRC
** Setting up hostname for container
*** Naming a container
   + If you do not specify the name of the container docker will automatically
     assume any random name.
   + To give name to a container:
     #+BEGIN_SRC command
     $ docker run [options] -name <name of container> <image> <command>  
     #+END_SRC
     For Example:
     #+BEGIN_SRC command
     $ docker run -it -name lab1_cse01 ubuntu:14.04 bash
     root@8c2fc6ba883b:~#  
     #+END_SRC
   + You can always rename your container
     #+BEGIN_SRC command
     $ docker rename [OPTIONS] OLD_NAME NEW_NAME
     #+END_SRC
     For Example:
     #+BEGIN_SRC command
     $ docker rename lab1_cae01 lab2_cse02
     #+END_SRC
*** Giving a hostname to container
 + To give host name to container you must use =-h= flag with the =docker run= command:
   #+BEGIN_SRC command 
   $ docker run -h <hostname> [options] [image] [command]
   #+END_SRC
   For Example:
   #+BEGIN_SRC command
   $ docker run -h new_ctnd -it ubuntu:14.04 bash
   root@new_cntd:~#
   #+END_SRC

**  List Docker Containers 
After existing from Docker container, execute below command to list all running containers.
#+BEGIN_EXAMPLE
# docker ps

CONTAINER ID     IMAGE     COMMAND        CREATED        STATUS        PORTS    NAMES
f2582758af13     ubuntu    "/bin/bash"    2 hours ago    Up 2 hours             first_ubuntu
#+END_EXAMPLE
By default Above command will list only running containers. To list all containers (including stopped container) use following command.
#+BEGIN_EXAMPLE
# docker ps -a

CONTAINER ID   IMAGE   COMMAND        CREATED        STATUS        PORTS    NAMES
f2582758af13   ubuntu  "/bin/bash"    2 hours ago    Up 2 hours             first_ubuntu
6b5b5a969241   centos  "/bin/bash"    2 days ago     Exited (0) 24 hours ago   ubuntu-web

#+END_EXAMPLE
**  Start/Stop/Attach Container
You can start, stop or attach to any containers with following commands. To start container use following command.
#+BEGIN_EXAMPLE
# docker start <CONTAINER ID|NAME>
#+END_EXAMPLE
To stop container use following command.
#+BEGIN_EXAMPLE
# docker stop <CONTAINER ID|NAME>
#+END_EXAMPLE
To attach to currently running container use following command.
#+BEGIN_EXAMPLE
# docker attach <CONTAINER ID|NAME>
#+END_EXAMPLE
**  Drop Docker Container
Before deleting any container make sure that container is stopped. You
can use ‘docker ps -a’ command to list status of containers. If
container is still running first stop that container using given
commands in above step.

Now use following command to delete single or multiple containers use following command.
#+BEGIN_EXAMPLE
# docker rm <CONTAINER ID|NAME> <CONTAINER ID|NAME>
#+END_EXAMPLE
You can also delete all stopped containers at once using following command.
#+BEGIN_EXAMPLE
# docker rm $(docker ps -a -q)
#+END_EXAMPLE
*  How to Search, Pull, List & Delete Docker Images on Linux 
**  Search Docker Images 
First of all search Docker container images from Docker hub. For example, below command will search all images with Ubuntu and list as output
#+BEGIN_EXAMPLE
# docker search ubuntu
#+END_EXAMPLE
The result will look like below
#+BEGIN_EXAMPLE
NAME                              DESCRIPTION          STARS     OFFICIAL   AUTOMATED

ubuntu                            Ubuntu is a Deb...   3318      [OK]
ubuntu-upstart                    Upstart is an e...   60        [OK]
torusware/speedus-ubuntu          Always updated ...   25                   [OK]
ubuntu-debootstrap                debootstrap --v...   24        [OK]
rastasheep/ubuntu-sshd            Dockerized SSH ...   22                   [OK]
neurodebian                       NeuroDebian pro...   17        [OK]
nuagebec/ubuntu                   Simple always u...   4                    [OK]
nickistre/ubuntu-lamp-wordpress   LAMP on Ubuntu ...   4                    [OK]
nimmis/ubuntu                     This is a docke...   3                    [OK]
#+END_EXAMPLE
** Pull Docker Images 
Now pull required docker image from docker hub on your local system using following commands. Below command will download image named “ubuntu”.
#+BEGIN_EXAMPLE
# docker pull ubuntu

latest: Pulling from library/ubuntu

fa5be2806d4c: Pull complete
b4af4261cb15: Downloading [==>               ] 3.779 MB/70.55 MB
5d358abc5d9c: Download complete
2933d50b9f77: Download complete
#+END_EXAMPLE
We are also downloading centos images from docker hub.
#+BEGIN_EXAMPLE
# docker pull centos
#+END_EXAMPLE
**  List Docker Images 
Now make sure that above images has been downloaded successfully on your system. Below command list all images.
#+BEGIN_EXAMPLE
# docker images

REPOSITORY  TAG         IMAGE ID          CREATED           VIRTUAL SIZE
ubuntu      latest      36248ae4a9ac      2 hours ago       188 MB
centos      latest      2933d50b9f77      2 hours ago       196.6 MB
#+END_EXAMPLE
**  Remove Docker Images 
To remove an images, Docker provides *rmi* option. Using this we can delete any docker images from our local system. 

For example use below command with changing *IMAGE ID* with your Docker image id.
#+BEGIN_EXAMPLE
# docker rmi  <IMAGE ID>
#+END_EXAMPLE
or you can simply remove images using repository name (image name)
#+BEGIN_EXAMPLE
# docker rmi ubuntu
#+END_EXAMPLE
In case you have two images with same name, add tag name while deletion
#+BEGIN_EXAMPLE
# docker rmi  ubuntu:latest
#+END_EXAMPLE
*  How to Move Docker Images between Hosts 
** List Docker Images 
Fist list docker images on your system using below command.
#+BEGIN_EXAMPLE
root@tecadmin:~# docker images

REPOSITORY     TAG        IMAGE ID            CREATED          VIRTUAL SIZE
centos         latest     2933d50b9f77        11 days ago      196.6 MB
ubuntu         latest     36248ae4a9ac        11 days ago      188 MB
#+END_EXAMPLE
** Save or Archive Image 
Now use the following command to save image repository named *ubuntu*
(image id: 36248ae4a9ac) and make a zipped archive named
*ubuntu-latest.tar.gz*. Remember that save is used for making backup
of docker images (not containers).
#+BEGIN_EXAMPLE
# docker save ubuntu | gzip > ubuntu-latest.tar.gz
#+END_EXAMPLE
** Import Image 
After saving docker image in archive format on your system move it to
remote system using scp or ftp. After that use below command on remote
system to import Docker image with name *ubuntu* and tag name
*latest*.
#+BEGIN_EXAMPLE
# zcat ubuntu-latest.gz | docker import - ubuntu:latest
#+END_EXAMPLE
The above command will create a docker image with name *ubuntu* and tag name *latest* on your system. You can now launch containers using this image like below.
#+BEGIN_EXAMPLE
# docker run -i -t ubuntu /bin/bash
#+END_EXAMPLE
*  How to Export and Import Docker Containers 
** List Containers 
Fist list all containers on your system using below command. Using *ps -a* will list all containers (running and stopped) from your system.
#+BEGIN_EXAMPLE
root@tecadmin:~# docker ps -a

CONTAINER ID   IMAGE    COMMAND      CREATED       STATUS      PORTS  NAMES
f2582758af13   ubuntu   "/bin/bash"  2 hours ago   Up 2 hours         ubuntu-web
2b199b9976c4   centos   "/bin/bash"  3 days ago    Up 3 hours         centos-mysql

#+END_EXAMPLE
** Export Container 
Finally use the following command to export container named *ubuntu-web* (container id: f2582758af13) and make a zipped archive named *ubuntu-web.tar.gz*. Remember that export is used for making backup of docker containers (not images) in image format.
#+BEGIN_EXAMPLE
# docker export ubuntu-web | gzip > ubuntu-web.tar.gz
#+END_EXAMPLE
** Import Container 
After exporting docker container on your system move it to remote server using scp or ftp. After that use below command on remote server to import Docker container on remote server with name ubuntu-web.
#+BEGIN_EXAMPLE
# zcat ubuntu-web.gz | docker import - ubuntu-web
#+END_EXAMPLE
The above command will create a docker image on your system. You can now launch a container from this image using below command.
#+BEGIN_EXAMPLE
# docker run -i -t ubuntu-web /bin/bash
#+END_EXAMPLE
*  How to Remove Docker Images and Containers 
** Remove Docker Images 
To remove an images, Docker provides *rmi* option. Using this we can delete any docker images from our local system. For example use below command with changing <IMAGE ID> with your Docker image id.
#+BEGIN_EXAMPLE
# docker rmi  <IMAGE ID>
#+END_EXAMPLE
To find all images on your system use following command. This will help you to find ID of images.
#+BEGIN_EXAMPLE
root@tecadmin:~# docker images

REPOSITORY     TAG        IMAGE ID            CREATED          VIRTUAL SIZE
centos         latest     2933d50b9f77        11 days ago      196.6 MB
ubuntu         latest     36248ae4a9ac        11 days ago      188 MB
#+END_EXAMPLE
** Remove Docker Containers 
To remove a containers, Docker provides *rm* option. Using this we can delete any docker containers from our local system.

 For example use below command with changing <CONTAINER ID> with your Docker container id.
#+BEGIN_EXAMPLE
# docker rm  <CONTAINER ID>
#+END_EXAMPLE
To list all containers on your system using *ps* option, but ps will show only running containers. So to view all containers use *-a* parameter with ps.
#+BEGIN_EXAMPLE
root@tecadmin:~# docker ps -a

CONTAINER ID   IMAGE    COMMAND      CREATED       STATUS      PORTS  NAMES
f2582758af13   ubuntu   "/bin/bash"  2 hours ago   Up 2 hours         first_ubuntu
2b199b9976c4   centos   "/bin/bash"  3 days ago    Up 3 hours         thirsty_yalow

#+END_EXAMPLE
** Remove All Docker Images
If you want to remove all docker images. You can use simply following command.
#+BEGIN_EXAMPLE
docker rmi $(docker images -q)
#+END_EXAMPLE
** Stop & Remove All Docker Containers 
If you want to remove all docker containers. You can use simply following commands. First command will stop all running docker containers and second command will delete them.
#+BEGIN_EXAMPLE
# docker stop $(docker ps -a -q)
# docker rm $(docker ps -a -q)
#+END_EXAMPLE
** List processes running inside a container 
 + Display the running processes of a container ::
   #+BEGIN_SRC command
   $ docker top [container]
   #+END_SRC
   For Example:
   #+BEGIN_SRC command
   $ docker top ec164228902a
   UID            PID             PPID           C              STIME           TTY            TIME             CMD
   root           5207            5192           0              20:32           pts/9          00:00:00         bash
   #+END_SRC   
** Running your container in detached mode
   + To run a container in the background as soon as it is created you have to
     specify =-d= flag along with the =docker run= command
     #+BEGIN_SRC command
     $ docker run -d [image] [command]
     #+END_SRC
     + This will run the command in the background and will automatically shuts down
       the container after its execution
     For Example:
     #+BEGIN_SRC command
     $ docker run -d ubuntu:14.04 bash
     698de53f5f4b151122e18b51d4abb813b4e1dff10e30472791dd5ec336fb4b10
     $
     #+END_SRC 
** Execute a command inside a container from host machine 
 + You can execute a command inside a container from the host machine
   provided the container is in running state. Otherwise you have to start
   the container first and then use the following command
   #+BEGIN_SRC command
   $ docker exec [OPTIONS] CONTAINER COMMAND [ARG...]
   #+END_SRC
   For example:
   #+BEGIN_SRC command
   root@raghu / $ docker ps
   CONTAINER ID   IMAGE          COMMAND      CREATED        STATUS              PORTS               NAMES
   e76ccff0a41a   ubuntu:14.04   "bash"       2 days ago     Up About an hour                        stoic_bhabha
 
   root@raghu/ $ docker exec e76ccff0a41a ping 127.0.0.1 -c 5
   PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.
   64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.050 ms
   64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.053 ms
   64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.055 ms
   64 bytes from 127.0.0.1: icmp_seq=4 ttl=64 time=0.033 ms
   64 bytes from 127.0.0.1: icmp_seq=5 ttl=64 time=0.054 ms

   --- 127.0.0.1 ping statistics ---
   5 packets transmitted, 5 received, 0% packet loss, time 3997ms
   rtt min/avg/max/mdev = 0.033/0.049/0.055/0.008 ms
   #+END_SRC
   + You can use various flags with this command
   #+BEGIN_SRC command
     -d                Detached mode: run command in the background
     -i                Keep STDIN open even if not attached
     -t                Allocate a pseudo Terminal
   #+END_SRC
** Get inside a container 
   To get terminal access to container you need to fire some commands. This may be
   required to install packages and configure them inside your container.
 + Case 1 :: 
   If you want to enter into a container as soon as you create it:
   #+BEGIN_SRC command
   $ docker run -it <repository>:<tag> bash
   #+END_SRC
   + =-i= flag to connect STDIN on the container
   + =-t= flag to get a pseudo terminal
   For Example:
   #+BEGIN_SRC command
   $ docker run -it ubuntua:14.04 bash
   root@ec164228902a:~#
   #+END_SRC

 + Case 2 :: 
   If you fire =bash= command inside a container, it runs forever, until
   manually stopped. By giving =-d= flag to =docker run=  a container executes
   and runs in detached mode, with no interaction with user. So to get inside a
   container which is running in detached mode:
   + Method 1 :: 
     + Using exec command
     #+BEGIN_SRC comand
     $ docker exec -it <Container ID> bash
     #+END_SRC
     For Example:
     #+BEGIN_SRC command
     $ docker exec -it ec164228902a bash
     root@ec164228902a:~#
     #+END_SRC
     + To come out of the container without stopping it ::
     #+BEGIN_SRC command 
     CTRL+P CTRL+Q
     #+END_SRC
       OR
     #+BEGIN_SRC command
     # exit
     #+END_SRC
     For example you are inside the container =ec164228902a=:
     #+BEGIN_SRC command
     root@ec164228902a:~# exit
     root@meghana ~ $
     root@meghana ~ $ docker ps
     CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
     07c5614d5a40        ubuntu:14.04        "bash"              21 minutes ago      Up 21 minutes                           evil_fermi
     ec164228902a        ubuntu:14.04        "bash"              4 days ago          Up 32 minutes                           stoic_bhabha
     #+END_SRC
   + Method 2 :: 
     + Using Attach command
     #+BEGIN_SRC command
     $ docker attach <Container ID>
     #+END_SRC
     + You might need to hit Enter to bring up the prompt.
     For Example:
     #+BEGIN_SRC command
     $ docker attach ec164228902
     $
     root@ec164228902:~#
     #+END_SRC
     + To come out of the container without stopping it ::
     #+BEGIN_SRC command
     CTRL+P+Q
     #+END_SRC
** Auto restart Containers 
   If your host machine shuts down, all container will be stopped. Once your
   restart your machine, all container should automatically start. To add such
   behavior to all your containers, you need to add a flag =--restart= in
   =docker run= command. 
   #+BEGIN_SRC command
   $ docker run [options] --restart=always [image] [command]
   #+END_SRC
   For Example:
   #+BEGIN_SRC command
   $ docker run -d -it --restart=always meghanab/app1:0.1 bash
   #+END_SRC
   + We need to specify whether you want to auto-start your container at the
     time of its creation itself.
** Resource allocation options for Docker containers
   + Using the =-m= flag with =docker run= command we can limit the memory(RAM)
     usage of the containers
     #+BEGIN_SRC command
     $ docker run -m [] [options] [image] [command]
     #+END_SRC
     For Example:
     #+BEGIN_SRC command
     $ docker run -d -it -m 300M ubuntu:14.04 bash
     WARNING: Your kernel does not support swap limit capabilities, memory limited without swap.
     b172827cb899f36e35e0fa587e6f30793f0ed37befe76a1e77b2f9cacc8c905a
     $  docker stats --no-stream=true
     CONTAINER           CPU %               MEM USAGE / LIMIT       MEM %               NET I/O             BLOCK I/O           PIDS
     b172827cb899        0.00%               712.7 kB / =314.6 MB=   0.23%               4.064 kB / 648 B    114.7 kB / 0 B      0
     ec164228902a        0.00%               4.375 MB / 4.064 GB     0.11%               12.37 kB / 648 B    4.071 MB / 0 B      0
     #+END_SRC
     + Thus here we are able to limit the RAM to 300MB
     + While for the other container it is 4GB as we didn't mention anything during
       its creation, so it takes 4GB(host system RAM) by default.
     + Here the =-d= flag lets the container run in detached mode
